//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.08.22 at 04:42:01 PM BST 
//


package org.javastro.ivoa.jaxb.visitor;

import javax.annotation.Generated;
import jakarta.xml.bind.JAXBElement;
import org.javastro.ivoa.entities.resource.AccessURL;
import org.javastro.ivoa.entities.resource.Capability;
import org.javastro.ivoa.entities.resource.Contact;
import org.javastro.ivoa.entities.resource.Creator;
import org.javastro.ivoa.entities.resource.Date;
import org.javastro.ivoa.entities.resource.Interface;
import org.javastro.ivoa.entities.resource.Relationship;
import org.javastro.ivoa.entities.resource.Resource;
import org.javastro.ivoa.entities.resource.ResourceName;
import org.javastro.ivoa.entities.resource.SecurityMethod;
import org.javastro.ivoa.entities.resource.Validation;
import org.javastro.ivoa.entities.resource.applications.ApplicationCapability;
import org.javastro.ivoa.entities.resource.applications.DataFormat;
import org.javastro.ivoa.entities.resource.applications.ExecutionEnvironment;
import org.javastro.ivoa.entities.resource.applications.impl.ApplicationCapabilityImpl;
import org.javastro.ivoa.entities.resource.applications.impl.ApplicationImpl;
import org.javastro.ivoa.entities.resource.applications.impl.DataFormatImpl;
import org.javastro.ivoa.entities.resource.applications.impl.DesktopApplicationImpl;
import org.javastro.ivoa.entities.resource.applications.impl.ExecutionEnvironmentImpl;
import org.javastro.ivoa.entities.resource.applications.impl.SoftwareLibraryImpl;
import org.javastro.ivoa.entities.resource.cone.impl.ConeSearchImpl;
import org.javastro.ivoa.entities.resource.dataservice.FKColumn;
import org.javastro.ivoa.entities.resource.dataservice.ForeignKey;
import org.javastro.ivoa.entities.resource.dataservice.Format;
import org.javastro.ivoa.entities.resource.dataservice.InputParam;
import org.javastro.ivoa.entities.resource.dataservice.Table;
import org.javastro.ivoa.entities.resource.dataservice.TableParam;
import org.javastro.ivoa.entities.resource.dataservice.TableSchema;
import org.javastro.ivoa.entities.resource.dataservice.impl.BaseParamImpl;
import org.javastro.ivoa.entities.resource.dataservice.impl.CatalogServiceImpl;
import org.javastro.ivoa.entities.resource.dataservice.impl.CoverageImpl;
import org.javastro.ivoa.entities.resource.dataservice.impl.DataCollectionImpl;
import org.javastro.ivoa.entities.resource.dataservice.impl.DataServiceImpl;
import org.javastro.ivoa.entities.resource.dataservice.impl.FKColumnImpl;
import org.javastro.ivoa.entities.resource.dataservice.impl.ForeignKeyImpl;
import org.javastro.ivoa.entities.resource.dataservice.impl.FormatImpl;
import org.javastro.ivoa.entities.resource.dataservice.impl.InputParamImpl;
import org.javastro.ivoa.entities.resource.dataservice.impl.ParamHTTPImpl;
import org.javastro.ivoa.entities.resource.dataservice.impl.ServiceReferenceImpl;
import org.javastro.ivoa.entities.resource.dataservice.impl.SimpleDataTypeImpl;
import org.javastro.ivoa.entities.resource.dataservice.impl.StandardSTCImpl;
import org.javastro.ivoa.entities.resource.dataservice.impl.TAPTypeImpl;
import org.javastro.ivoa.entities.resource.dataservice.impl.TableImpl;
import org.javastro.ivoa.entities.resource.dataservice.impl.TableParamImpl;
import org.javastro.ivoa.entities.resource.dataservice.impl.TableSchemaImpl;
import org.javastro.ivoa.entities.resource.dataservice.impl.TableSetImpl;
import org.javastro.ivoa.entities.resource.dataservice.impl.VOTableTypeImpl;
import org.javastro.ivoa.entities.resource.impl.AccessURLImpl;
import org.javastro.ivoa.entities.resource.impl.CapabilityImpl;
import org.javastro.ivoa.entities.resource.impl.ContactImpl;
import org.javastro.ivoa.entities.resource.impl.ContentImpl;
import org.javastro.ivoa.entities.resource.impl.CreatorImpl;
import org.javastro.ivoa.entities.resource.impl.CurationImpl;
import org.javastro.ivoa.entities.resource.impl.DateImpl;
import org.javastro.ivoa.entities.resource.impl.OrganisationImpl;
import org.javastro.ivoa.entities.resource.impl.RelationshipImpl;
import org.javastro.ivoa.entities.resource.impl.ResourceImpl;
import org.javastro.ivoa.entities.resource.impl.ResourceNameImpl;
import org.javastro.ivoa.entities.resource.impl.SecurityMethodImpl;
import org.javastro.ivoa.entities.resource.impl.ServiceImpl;
import org.javastro.ivoa.entities.resource.impl.SourceImpl;
import org.javastro.ivoa.entities.resource.impl.ValidationImpl;
import org.javastro.ivoa.entities.resource.impl.WebBrowserImpl;
import org.javastro.ivoa.entities.resource.impl.WebServiceImpl;
import org.javastro.ivoa.entities.resource.registry.iface.impl.VOResourcesImpl;
import org.javastro.ivoa.entities.resource.registry.impl.AuthorityImpl;
import org.javastro.ivoa.entities.resource.registry.impl.HarvestImpl;
import org.javastro.ivoa.entities.resource.registry.impl.OAIHTTPImpl;
import org.javastro.ivoa.entities.resource.registry.impl.OAISOAPImpl;
import org.javastro.ivoa.entities.resource.registry.impl.RegistryImpl;
import org.javastro.ivoa.entities.resource.registry.impl.SearchImpl;
import org.javastro.ivoa.entities.resource.registry.oaipmh.AboutType;
import org.javastro.ivoa.entities.resource.registry.oaipmh.DescriptionType;
import org.javastro.ivoa.entities.resource.registry.oaipmh.HeaderType;
import org.javastro.ivoa.entities.resource.registry.oaipmh.MetadataFormatType;
import org.javastro.ivoa.entities.resource.registry.oaipmh.OAIPMHerrorType;
import org.javastro.ivoa.entities.resource.registry.oaipmh.RecordType;
import org.javastro.ivoa.entities.resource.registry.oaipmh.SetType;
import org.javastro.ivoa.entities.resource.registry.oaipmh.impl.AboutTypeImpl;
import org.javastro.ivoa.entities.resource.registry.oaipmh.impl.DescriptionTypeImpl;
import org.javastro.ivoa.entities.resource.registry.oaipmh.impl.GetRecordTypeImpl;
import org.javastro.ivoa.entities.resource.registry.oaipmh.impl.HeaderTypeImpl;
import org.javastro.ivoa.entities.resource.registry.oaipmh.impl.IdentifyTypeImpl;
import org.javastro.ivoa.entities.resource.registry.oaipmh.impl.ListIdentifiersTypeImpl;
import org.javastro.ivoa.entities.resource.registry.oaipmh.impl.ListRecordsTypeImpl;
import org.javastro.ivoa.entities.resource.registry.oaipmh.impl.ListSetsTypeImpl;
import org.javastro.ivoa.entities.resource.registry.oaipmh.impl.MetadataFormatTypeImpl;
import org.javastro.ivoa.entities.resource.registry.oaipmh.impl.MetadataTypeImpl;
import org.javastro.ivoa.entities.resource.registry.oaipmh.impl.OAIPMHImpl;
import org.javastro.ivoa.entities.resource.registry.oaipmh.impl.OAIPMHerrorTypeImpl;
import org.javastro.ivoa.entities.resource.registry.oaipmh.impl.RecordTypeImpl;
import org.javastro.ivoa.entities.resource.registry.oaipmh.impl.RequestTypeImpl;
import org.javastro.ivoa.entities.resource.registry.oaipmh.impl.ResumptionTokenTypeImpl;
import org.javastro.ivoa.entities.resource.registry.oaipmh.impl.SetTypeImpl;
import org.javastro.ivoa.entities.resource.sia.impl.SimpleImageAccessImpl;
import org.javastro.ivoa.entities.resource.sia.impl.SkyPosImpl;
import org.javastro.ivoa.entities.resource.sia.impl.SkySizeImpl;
import org.javastro.ivoa.entities.resource.standard.EndorsedVersion;
import org.javastro.ivoa.entities.resource.standard.Schema;
import org.javastro.ivoa.entities.resource.standard.StandardKey;
import org.javastro.ivoa.entities.resource.standard.impl.EndorsedVersionImpl;
import org.javastro.ivoa.entities.resource.standard.impl.SchemaImpl;
import org.javastro.ivoa.entities.resource.standard.impl.ServiceStandardImpl;
import org.javastro.ivoa.entities.resource.standard.impl.StandardImpl;
import org.javastro.ivoa.entities.resource.standard.impl.StandardKeyEnumerationImpl;
import org.javastro.ivoa.entities.resource.standard.impl.StandardKeyImpl;
import org.javastro.ivoa.entities.resource.tap.DataModelType;
import org.javastro.ivoa.entities.resource.tap.Language;
import org.javastro.ivoa.entities.resource.tap.LanguageFeature;
import org.javastro.ivoa.entities.resource.tap.LanguageFeatureList;
import org.javastro.ivoa.entities.resource.tap.OutputFormat;
import org.javastro.ivoa.entities.resource.tap.UploadMethod;
import org.javastro.ivoa.entities.resource.tap.Version;
import org.javastro.ivoa.entities.resource.tap.impl.DataLimitImpl;
import org.javastro.ivoa.entities.resource.tap.impl.DataLimitsImpl;
import org.javastro.ivoa.entities.resource.tap.impl.DataModelTypeImpl;
import org.javastro.ivoa.entities.resource.tap.impl.LanguageFeatureImpl;
import org.javastro.ivoa.entities.resource.tap.impl.LanguageFeatureListImpl;
import org.javastro.ivoa.entities.resource.tap.impl.LanguageImpl;
import org.javastro.ivoa.entities.resource.tap.impl.OutputFormatImpl;
import org.javastro.ivoa.entities.resource.tap.impl.TableAccessImpl;
import org.javastro.ivoa.entities.resource.tap.impl.TimeLimitsImpl;
import org.javastro.ivoa.entities.resource.tap.impl.UploadMethodImpl;
import org.javastro.ivoa.entities.resource.tap.impl.VersionImpl;
import org.javastro.ivoa.entities.stc.v1.AstroCoordAreaType;
import org.javastro.ivoa.entities.stc.v1.AstroCoordSystemType;
import org.javastro.ivoa.entities.stc.v1.AstroCoordsType;
import org.javastro.ivoa.entities.stc.v1.CoordAreaType;
import org.javastro.ivoa.entities.stc.v1.CoordIntervalType;
import org.javastro.ivoa.entities.stc.v1.CoordSysType;
import org.javastro.ivoa.entities.stc.v1.CoordinateType;
import org.javastro.ivoa.entities.stc.v1.CoordsType;
import org.javastro.ivoa.entities.stc.v1.Double1Type;
import org.javastro.ivoa.entities.stc.v1.Double3Type;
import org.javastro.ivoa.entities.stc.v1.GenericCoordFrameType;
import org.javastro.ivoa.entities.stc.v1.HalfspaceType;
import org.javastro.ivoa.entities.stc.v1.PixelCoordsType;
import org.javastro.ivoa.entities.stc.v1.PixelFrameType;
import org.javastro.ivoa.entities.stc.v1.RedshiftIntervalType;
import org.javastro.ivoa.entities.stc.v1.RegionType;
import org.javastro.ivoa.entities.stc.v1.SpectralIntervalType;
import org.javastro.ivoa.entities.stc.v1.StcDescriptionType;
import org.javastro.ivoa.entities.stc.v1.TimeIntervalType;
import org.javastro.ivoa.entities.stc.v1.VertexType;
import org.javastro.ivoa.entities.stc.v1.impl.AllSkyTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.AstroCoordAreaTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.AstroCoordSystemTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.AstroCoordsFileTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.AstroCoordsTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.AstroSTCDescriptionTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.AstronTimeTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.BasicCoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.BoxTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Cart1DRefFrameTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Cart2DRefFrameTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Cart3DRefFrameTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.CircleTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.ConvexHullTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.ConvexTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Coord2VecIntervalTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Coord3VecIntervalTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.CoordAreaTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.CoordFITSColumnsTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.CoordFlavorTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.CoordFrameTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.CoordIntervalTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.CoordRefFrameTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.CoordScalarIntervalTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.CoordSysTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.CoordValueTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.CoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.CoordsTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Curve2TypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Curve3TypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.CustomRefPosTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.DiffTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Double1TypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Double2TypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Double3TypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Double4TypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Double9TypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.EllipseTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.FitsTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.FkTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.GenVector2CoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.GenVector3CoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.GenericCoordFrameTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.GenericRefPosTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.GeodTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.HalfspaceTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.HealpixTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.IcrsTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.IntersectionTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.IsoTimeTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.JdTimeTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.NegationTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.ObsDataLocationTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.ObservatoryLocationTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.OrbitTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.PixelCoordAreaTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.PixelCoordSystemTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.PixelCoordsTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.PixelFrameTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.PixelSpaceTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.PixelTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.PixelVector1CoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.PixelVector2CoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.PixelVector3CoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.PolygonTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Pos2VecIntervalTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Pos3VecIntervalTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.PosAngleTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.PosScalarIntervalTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.PosVector1CoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.PosVector2CoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.PosVector3CoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.RedshiftCoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.RedshiftFrameTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.RedshiftIntervalTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.RegionAreaTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.RegionFileTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.RegionTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.STCCoordinateImpl;
import org.javastro.ivoa.entities.stc.v1.impl.STCCoordinateListImpl;
import org.javastro.ivoa.entities.stc.v1.impl.STCRegionImpl;
import org.javastro.ivoa.entities.stc.v1.impl.STCRegionListImpl;
import org.javastro.ivoa.entities.stc.v1.impl.ScalarCoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.SectorTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.ShapeTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Size2TypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Size3TypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.SmallCircleTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.SpaceFrameTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.SpectralCoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.SpectralFrameTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.SpectralIntervalTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.SphereTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.SphericalRefFrameTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.StcDescriptionTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.StcMetadataTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.StdRefPosTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.StringCoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.TimeCoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.TimeFrameTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.TimeIntervalTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.TimeOffsetTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.UCoord2VecIntervalTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.UCoord3VecIntervalTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.UCoordScalarIntervalTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.UnionTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Vector2CoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Vector3CoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Vel2VecIntervalTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.Vel3VecIntervalTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.VelScalarIntervalTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.VelVector1CoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.VelVector2CoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.VelVector3CoordinateTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.VelocitySphereTypeImpl;
import org.javastro.ivoa.entities.stc.v1.impl.VertexTypeImpl;
import org.javastro.ivoa.entities.uws.Parameter;
import org.javastro.ivoa.entities.uws.ResultReference;
import org.javastro.ivoa.entities.uws.ShortJobDescription;
import org.javastro.ivoa.entities.uws.impl.ErrorSummaryImpl;
import org.javastro.ivoa.entities.uws.impl.JobImpl;
import org.javastro.ivoa.entities.uws.impl.JobsImpl;
import org.javastro.ivoa.entities.uws.impl.ParameterImpl;
import org.javastro.ivoa.entities.uws.impl.ResultReferenceImpl;
import org.javastro.ivoa.entities.uws.impl.ShortJobDescriptionImpl;
import org.javastro.ivoa.entities.vodml.Attribute;
import org.javastro.ivoa.entities.vodml.Composition;
import org.javastro.ivoa.entities.vodml.Constraint;
import org.javastro.ivoa.entities.vodml.DataType;
import org.javastro.ivoa.entities.vodml.EnumLiteral;
import org.javastro.ivoa.entities.vodml.Enumeration;
import org.javastro.ivoa.entities.vodml.ModelImport;
import org.javastro.ivoa.entities.vodml.ObjectType;
import org.javastro.ivoa.entities.vodml.Package;
import org.javastro.ivoa.entities.vodml.PrimitiveType;
import org.javastro.ivoa.entities.vodml.Reference;
import org.javastro.ivoa.entities.vodml.impl.AttributeImpl;
import org.javastro.ivoa.entities.vodml.impl.CompositionImpl;
import org.javastro.ivoa.entities.vodml.impl.ConstraintImpl;
import org.javastro.ivoa.entities.vodml.impl.ElementRefImpl;
import org.javastro.ivoa.entities.vodml.impl.EnumLiteralImpl;
import org.javastro.ivoa.entities.vodml.impl.EnumerationImpl;
import org.javastro.ivoa.entities.vodml.impl.ModelImpl;
import org.javastro.ivoa.entities.vodml.impl.ModelImportImpl;
import org.javastro.ivoa.entities.vodml.impl.MultiplicityImpl;
import org.javastro.ivoa.entities.vodml.impl.ObjectTypeImpl;
import org.javastro.ivoa.entities.vodml.impl.PackageImpl;
import org.javastro.ivoa.entities.vodml.impl.PrimitiveTypeImpl;
import org.javastro.ivoa.entities.vodml.impl.ReferenceImpl;
import org.javastro.ivoa.entities.vodml.impl.SemanticConceptImpl;
import org.javastro.ivoa.entities.vodml.impl.SubsettedRoleImpl;
import org.javastro.ivoa.entities.vosi.impl.AvailabilityImpl;
import org.w3c.dom.Element;

@Generated("Generated by jaxb-visitor")
public class DepthFirstTraverserImpl<E extends Throwable >
    implements Traverser<E>
{


    @Override
    public void traverseApplicationCapabilityImpl(ApplicationCapabilityImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseApplicationImpl(ApplicationImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (DataFormat bean: aBean.getDataFormats()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (ApplicationCapability bean: aBean.getVoStandards()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCuration() instanceof Visitable) {
            ((Visitable) aBean.getCuration()).accept(aVisitor);
        }
        if (aBean.getContent() instanceof Visitable) {
            ((Visitable) aBean.getContent()).accept(aVisitor);
        }
    }

    @Override
    public void traverseDataFormatImpl(DataFormatImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseDesktopApplicationImpl(DesktopApplicationImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (ExecutionEnvironment bean: aBean.getExecutables()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (DataFormat bean: aBean.getDataFormats()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (ApplicationCapability bean: aBean.getVoStandards()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCuration() instanceof Visitable) {
            ((Visitable) aBean.getCuration()).accept(aVisitor);
        }
        if (aBean.getContent() instanceof Visitable) {
            ((Visitable) aBean.getContent()).accept(aVisitor);
        }
    }

    @Override
    public void traverseExecutionEnvironmentImpl(ExecutionEnvironmentImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseSoftwareLibraryImpl(SoftwareLibraryImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (ExecutionEnvironment bean: aBean.getLibraries()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (DataFormat bean: aBean.getDataFormats()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (ApplicationCapability bean: aBean.getVoStandards()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCuration() instanceof Visitable) {
            ((Visitable) aBean.getCuration()).accept(aVisitor);
        }
        if (aBean.getContent() instanceof Visitable) {
            ((Visitable) aBean.getContent()).accept(aVisitor);
        }
    }

    @Override
    public void traverseConeSearchImpl(ConeSearchImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getTestQuery() instanceof Visitable) {
            ((Visitable) aBean.getTestQuery()).accept(aVisitor);
        }
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Interface bean: aBean.getInterfaces()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseQueryImpl(org.javastro.ivoa.entities.resource.cone.impl.QueryImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseBaseParamImpl(BaseParamImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseCatalogServiceImpl(CatalogServiceImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getTableset() instanceof Visitable) {
            ((Visitable) aBean.getTableset()).accept(aVisitor);
        }
        for (ResourceName bean: aBean.getFacilities()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (ResourceName bean: aBean.getInstruments()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCoverage() instanceof Visitable) {
            ((Visitable) aBean.getCoverage()).accept(aVisitor);
        }
        for (Capability bean: aBean.getCapabilities()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCuration() instanceof Visitable) {
            ((Visitable) aBean.getCuration()).accept(aVisitor);
        }
        if (aBean.getContent() instanceof Visitable) {
            ((Visitable) aBean.getContent()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCoverageImpl(CoverageImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getSTCResourceProfile() instanceof Visitable) {
            ((Visitable) aBean.getSTCResourceProfile()).accept(aVisitor);
        }
        if (aBean.getFootprint() instanceof Visitable) {
            ((Visitable) aBean.getFootprint()).accept(aVisitor);
        }
    }

    @Override
    public void traverseDataCollectionImpl(DataCollectionImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (ResourceName bean: aBean.getFacilities()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (ResourceName bean: aBean.getInstruments()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Format bean: aBean.getFormats()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCoverage() instanceof Visitable) {
            ((Visitable) aBean.getCoverage()).accept(aVisitor);
        }
        if (aBean.getTableset() instanceof Visitable) {
            ((Visitable) aBean.getTableset()).accept(aVisitor);
        }
        if (aBean.getAccessURL() instanceof Visitable) {
            ((Visitable) aBean.getAccessURL()).accept(aVisitor);
        }
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCuration() instanceof Visitable) {
            ((Visitable) aBean.getCuration()).accept(aVisitor);
        }
        if (aBean.getContent() instanceof Visitable) {
            ((Visitable) aBean.getContent()).accept(aVisitor);
        }
    }

    @Override
    public void traverseDataServiceImpl(DataServiceImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (ResourceName bean: aBean.getFacilities()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (ResourceName bean: aBean.getInstruments()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCoverage() instanceof Visitable) {
            ((Visitable) aBean.getCoverage()).accept(aVisitor);
        }
        for (Capability bean: aBean.getCapabilities()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCuration() instanceof Visitable) {
            ((Visitable) aBean.getCuration()).accept(aVisitor);
        }
        if (aBean.getContent() instanceof Visitable) {
            ((Visitable) aBean.getContent()).accept(aVisitor);
        }
    }

    @Override
    public void traverseDataTypeImpl(org.javastro.ivoa.entities.resource.dataservice.impl.DataTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseFKColumnImpl(FKColumnImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseForeignKeyImpl(ForeignKeyImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (FKColumn bean: aBean.getFkColumns()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseFormatImpl(FormatImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseInputParamImpl(InputParamImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getDataType() instanceof Visitable) {
            ((Visitable) aBean.getDataType()).accept(aVisitor);
        }
    }

    @Override
    public void traverseParamHTTPImpl(ParamHTTPImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (InputParam bean: aBean.getParams()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (AccessURL bean: aBean.getAccessURLs()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (SecurityMethod bean: aBean.getSecurityMethods()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseServiceReferenceImpl(ServiceReferenceImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseSimpleDataTypeImpl(SimpleDataTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseStandardSTCImpl(StandardSTCImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (StcDescriptionType bean: aBean.getStcDefinitions()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCuration() instanceof Visitable) {
            ((Visitable) aBean.getCuration()).accept(aVisitor);
        }
        if (aBean.getContent() instanceof Visitable) {
            ((Visitable) aBean.getContent()).accept(aVisitor);
        }
    }

    @Override
    public void traverseTAPTypeImpl(TAPTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseTableImpl(TableImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (TableParam bean: aBean.getColumns()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (ForeignKey bean: aBean.getForeignKeies()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseTableParamImpl(TableParamImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getDataType() instanceof Visitable) {
            ((Visitable) aBean.getDataType()).accept(aVisitor);
        }
    }

    @Override
    public void traverseTableSchemaImpl(TableSchemaImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (Table bean: aBean.getTables()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseTableSetImpl(TableSetImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (TableSchema bean: aBean.getSchemas()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseVOTableTypeImpl(VOTableTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseAccessURLImpl(AccessURLImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseCapabilityImpl(CapabilityImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Interface bean: aBean.getInterfaces()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseContactImpl(ContactImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getName() instanceof Visitable) {
            ((Visitable) aBean.getName()).accept(aVisitor);
        }
    }

    @Override
    public void traverseContentImpl(ContentImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getSource() instanceof Visitable) {
            ((Visitable) aBean.getSource()).accept(aVisitor);
        }
        for (Relationship bean: aBean.getRelationships()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseCreatorImpl(CreatorImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getName() instanceof Visitable) {
            ((Visitable) aBean.getName()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCurationImpl(CurationImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getPublisher() instanceof Visitable) {
            ((Visitable) aBean.getPublisher()).accept(aVisitor);
        }
        for (Creator bean: aBean.getCreators()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (ResourceName bean: aBean.getContributors()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Date bean: aBean.getDates()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Contact bean: aBean.getContacts()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseDateImpl(DateImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseOrganisationImpl(OrganisationImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (ResourceName bean: aBean.getFacilities()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (ResourceName bean: aBean.getInstruments()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCuration() instanceof Visitable) {
            ((Visitable) aBean.getCuration()).accept(aVisitor);
        }
        if (aBean.getContent() instanceof Visitable) {
            ((Visitable) aBean.getContent()).accept(aVisitor);
        }
    }

    @Override
    public void traverseRelationshipImpl(RelationshipImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (ResourceName bean: aBean.getRelatedResources()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseResourceImpl(ResourceImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCuration() instanceof Visitable) {
            ((Visitable) aBean.getCuration()).accept(aVisitor);
        }
        if (aBean.getContent() instanceof Visitable) {
            ((Visitable) aBean.getContent()).accept(aVisitor);
        }
    }

    @Override
    public void traverseResourceNameImpl(ResourceNameImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseSecurityMethodImpl(SecurityMethodImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseServiceImpl(ServiceImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (Capability bean: aBean.getCapabilities()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCuration() instanceof Visitable) {
            ((Visitable) aBean.getCuration()).accept(aVisitor);
        }
        if (aBean.getContent() instanceof Visitable) {
            ((Visitable) aBean.getContent()).accept(aVisitor);
        }
    }

    @Override
    public void traverseSourceImpl(SourceImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseValidationImpl(ValidationImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseWebBrowserImpl(WebBrowserImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (AccessURL bean: aBean.getAccessURLs()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (SecurityMethod bean: aBean.getSecurityMethods()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseWebServiceImpl(WebServiceImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (AccessURL bean: aBean.getAccessURLs()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (SecurityMethod bean: aBean.getSecurityMethods()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseVOResourcesImpl(VOResourcesImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (Resource bean: aBean.getResources()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseAuthorityImpl(AuthorityImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getManagingOrg() instanceof Visitable) {
            ((Visitable) aBean.getManagingOrg()).accept(aVisitor);
        }
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCuration() instanceof Visitable) {
            ((Visitable) aBean.getCuration()).accept(aVisitor);
        }
        if (aBean.getContent() instanceof Visitable) {
            ((Visitable) aBean.getContent()).accept(aVisitor);
        }
    }

    @Override
    public void traverseHarvestImpl(HarvestImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Interface bean: aBean.getInterfaces()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseOAIHTTPImpl(OAIHTTPImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (AccessURL bean: aBean.getAccessURLs()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (SecurityMethod bean: aBean.getSecurityMethods()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseOAISOAPImpl(OAISOAPImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (AccessURL bean: aBean.getAccessURLs()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (SecurityMethod bean: aBean.getSecurityMethods()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseRegistryImpl(RegistryImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (Capability bean: aBean.getCapabilities()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCuration() instanceof Visitable) {
            ((Visitable) aBean.getCuration()).accept(aVisitor);
        }
        if (aBean.getContent() instanceof Visitable) {
            ((Visitable) aBean.getContent()).accept(aVisitor);
        }
    }

    @Override
    public void traverseSearchImpl(SearchImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Interface bean: aBean.getInterfaces()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseAboutTypeImpl(AboutTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getAny() instanceof Visitable) {
            ((Visitable) aBean.getAny()).accept(aVisitor);
        }
    }

    @Override
    public void traverseDescriptionTypeImpl(DescriptionTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getAny() instanceof Visitable) {
            ((Visitable) aBean.getAny()).accept(aVisitor);
        }
    }

    @Override
    public void traverseGetRecordTypeImpl(GetRecordTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getRecord() instanceof Visitable) {
            ((Visitable) aBean.getRecord()).accept(aVisitor);
        }
    }

    @Override
    public void traverseHeaderTypeImpl(HeaderTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseIdentifyTypeImpl(IdentifyTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (DescriptionType bean: aBean.getDescriptions()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseListIdentifiersTypeImpl(ListIdentifiersTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (HeaderType bean: aBean.getHeaders()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getResumptionToken() instanceof Visitable) {
            ((Visitable) aBean.getResumptionToken()).accept(aVisitor);
        }
    }

    @Override
    public void traverseListRecordsTypeImpl(ListRecordsTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (RecordType bean: aBean.getRecords()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getResumptionToken() instanceof Visitable) {
            ((Visitable) aBean.getResumptionToken()).accept(aVisitor);
        }
    }

    @Override
    public void traverseListSetsTypeImpl(ListSetsTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (SetType bean: aBean.getSets()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getResumptionToken() instanceof Visitable) {
            ((Visitable) aBean.getResumptionToken()).accept(aVisitor);
        }
    }

    @Override
    public void traverseMetadataFormatTypeImpl(MetadataFormatTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseMetadataTypeImpl(MetadataTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getAny() instanceof Visitable) {
            ((Visitable) aBean.getAny()).accept(aVisitor);
        }
    }

    @Override
    public void traverseOAIPMHImpl(OAIPMHImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getRequest() instanceof Visitable) {
            ((Visitable) aBean.getRequest()).accept(aVisitor);
        }
        if (aBean.getListRecords() instanceof Visitable) {
            ((Visitable) aBean.getListRecords()).accept(aVisitor);
        }
        if (aBean.getListIdentifiers() instanceof Visitable) {
            ((Visitable) aBean.getListIdentifiers()).accept(aVisitor);
        }
        if (aBean.getGetRecord() instanceof Visitable) {
            ((Visitable) aBean.getGetRecord()).accept(aVisitor);
        }
        if (aBean.getListSets() instanceof Visitable) {
            ((Visitable) aBean.getListSets()).accept(aVisitor);
        }
        for (MetadataFormatType bean: aBean.getListMetadataFormats()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getIdentify() instanceof Visitable) {
            ((Visitable) aBean.getIdentify()).accept(aVisitor);
        }
        for (OAIPMHerrorType bean: aBean.getErrors()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseOAIPMHerrorTypeImpl(OAIPMHerrorTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseRecordTypeImpl(RecordTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getHeader() instanceof Visitable) {
            ((Visitable) aBean.getHeader()).accept(aVisitor);
        }
        if (aBean.getMetadata() instanceof Visitable) {
            ((Visitable) aBean.getMetadata()).accept(aVisitor);
        }
        for (AboutType bean: aBean.getAbouts()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseRequestTypeImpl(RequestTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseResumptionTokenTypeImpl(ResumptionTokenTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseSetTypeImpl(SetTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (DescriptionType bean: aBean.getSetDescriptions()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseQueryImpl(org.javastro.ivoa.entities.resource.sia.impl.QueryImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getPos() instanceof Visitable) {
            ((Visitable) aBean.getPos()).accept(aVisitor);
        }
        if (aBean.getSize() instanceof Visitable) {
            ((Visitable) aBean.getSize()).accept(aVisitor);
        }
    }

    @Override
    public void traverseSimpleImageAccessImpl(SimpleImageAccessImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getMaxQueryRegionSize() instanceof Visitable) {
            ((Visitable) aBean.getMaxQueryRegionSize()).accept(aVisitor);
        }
        if (aBean.getMaxImageExtent() instanceof Visitable) {
            ((Visitable) aBean.getMaxImageExtent()).accept(aVisitor);
        }
        if (aBean.getTestQuery() instanceof Visitable) {
            ((Visitable) aBean.getTestQuery()).accept(aVisitor);
        }
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Interface bean: aBean.getInterfaces()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseSkyPosImpl(SkyPosImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseSkySizeImpl(SkySizeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseEndorsedVersionImpl(EndorsedVersionImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseSchemaImpl(SchemaImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseServiceStandardImpl(ServiceStandardImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (Interface bean: aBean.getInterfaces()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (EndorsedVersion bean: aBean.getEndorsedVersions()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Schema bean: aBean.getSchemas()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (StandardKey bean: aBean.getKeies()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCuration() instanceof Visitable) {
            ((Visitable) aBean.getCuration()).accept(aVisitor);
        }
        if (aBean.getContent() instanceof Visitable) {
            ((Visitable) aBean.getContent()).accept(aVisitor);
        }
    }

    @Override
    public void traverseStandardImpl(StandardImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (EndorsedVersion bean: aBean.getEndorsedVersions()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Schema bean: aBean.getSchemas()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (StandardKey bean: aBean.getKeies()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCuration() instanceof Visitable) {
            ((Visitable) aBean.getCuration()).accept(aVisitor);
        }
        if (aBean.getContent() instanceof Visitable) {
            ((Visitable) aBean.getContent()).accept(aVisitor);
        }
    }

    @Override
    public void traverseStandardKeyEnumerationImpl(StandardKeyEnumerationImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (StandardKey bean: aBean.getKeies()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCuration() instanceof Visitable) {
            ((Visitable) aBean.getCuration()).accept(aVisitor);
        }
        if (aBean.getContent() instanceof Visitable) {
            ((Visitable) aBean.getContent()).accept(aVisitor);
        }
    }

    @Override
    public void traverseStandardKeyImpl(StandardKeyImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseDataLimitImpl(DataLimitImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseDataLimitsImpl(DataLimitsImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getDefault() instanceof Visitable) {
            ((Visitable) aBean.getDefault()).accept(aVisitor);
        }
        if (aBean.getHard() instanceof Visitable) {
            ((Visitable) aBean.getHard()).accept(aVisitor);
        }
    }

    @Override
    public void traverseDataModelTypeImpl(DataModelTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseLanguageFeatureImpl(LanguageFeatureImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseLanguageFeatureListImpl(LanguageFeatureListImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (LanguageFeature bean: aBean.getFeatures()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseLanguageImpl(LanguageImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (Version bean: aBean.getVersions()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (LanguageFeatureList bean: aBean.getLanguageFeatures()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseOutputFormatImpl(OutputFormatImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseTableAccessImpl(TableAccessImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (DataModelType bean: aBean.getDataModels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Language bean: aBean.getLanguages()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (OutputFormat bean: aBean.getOutputFormats()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (UploadMethod bean: aBean.getUploadMethods()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getRetentionPeriod() instanceof Visitable) {
            ((Visitable) aBean.getRetentionPeriod()).accept(aVisitor);
        }
        if (aBean.getExecutionDuration() instanceof Visitable) {
            ((Visitable) aBean.getExecutionDuration()).accept(aVisitor);
        }
        if (aBean.getOutputLimit() instanceof Visitable) {
            ((Visitable) aBean.getOutputLimit()).accept(aVisitor);
        }
        if (aBean.getUploadLimit() instanceof Visitable) {
            ((Visitable) aBean.getUploadLimit()).accept(aVisitor);
        }
        for (Validation bean: aBean.getValidationLevels()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Interface bean: aBean.getInterfaces()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseTimeLimitsImpl(TimeLimitsImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseUploadMethodImpl(UploadMethodImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseVersionImpl(VersionImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseAllSkyTypeImpl(AllSkyTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getArea() instanceof Visitable) {
            ((Visitable) aBean.getArea()).accept(aVisitor);
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseAstroCoordAreaTypeImpl(AstroCoordAreaTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (TimeIntervalType bean: aBean.getTimeIntervals()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if ((aBean.getPositionInterval()!= null)&&(aBean.getPositionInterval().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getPositionInterval().getValue()).accept(aVisitor);
        }
        for (JAXBElement<? extends CoordIntervalType> obj: aBean.getVelocityIntervals()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (SpectralIntervalType bean: aBean.getSpectralIntervals()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (RedshiftIntervalType bean: aBean.getRedshiftIntervals()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (JAXBElement<? extends CoordIntervalType> obj: aBean.getCoordIntervals()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseAstroCoordSystemTypeImpl(AstroCoordSystemTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getTimeFrame() instanceof Visitable) {
            ((Visitable) aBean.getTimeFrame()).accept(aVisitor);
        }
        if (aBean.getSpaceFrame() instanceof Visitable) {
            ((Visitable) aBean.getSpaceFrame()).accept(aVisitor);
        }
        if (aBean.getSpectralFrame() instanceof Visitable) {
            ((Visitable) aBean.getSpectralFrame()).accept(aVisitor);
        }
        if (aBean.getRedshiftFrame() instanceof Visitable) {
            ((Visitable) aBean.getRedshiftFrame()).accept(aVisitor);
        }
        for (GenericCoordFrameType bean: aBean.getCoordFrames()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseAstroCoordsFileTypeImpl(AstroCoordsFileTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getFITSFile() instanceof Visitable) {
            ((Visitable) aBean.getFITSFile()).accept(aVisitor);
        }
        if (aBean.getFITSTime() instanceof Visitable) {
            ((Visitable) aBean.getFITSTime()).accept(aVisitor);
        }
        if (aBean.getFITSPosition() instanceof Visitable) {
            ((Visitable) aBean.getFITSPosition()).accept(aVisitor);
        }
        if (aBean.getFITSVelocity() instanceof Visitable) {
            ((Visitable) aBean.getFITSVelocity()).accept(aVisitor);
        }
        if (aBean.getFITSSpectral() instanceof Visitable) {
            ((Visitable) aBean.getFITSSpectral()).accept(aVisitor);
        }
        if (aBean.getFITSRedshift() instanceof Visitable) {
            ((Visitable) aBean.getFITSRedshift()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseAstroCoordsTypeImpl(AstroCoordsTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getTime() instanceof Visitable) {
            ((Visitable) aBean.getTime()).accept(aVisitor);
        }
        if ((aBean.getPosition()!= null)&&(aBean.getPosition().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getPosition().getValue()).accept(aVisitor);
        }
        if ((aBean.getVelocity()!= null)&&(aBean.getVelocity().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getVelocity().getValue()).accept(aVisitor);
        }
        if (aBean.getSpectral() instanceof Visitable) {
            ((Visitable) aBean.getSpectral()).accept(aVisitor);
        }
        if (aBean.getRedshift() instanceof Visitable) {
            ((Visitable) aBean.getRedshift()).accept(aVisitor);
        }
        if (aBean.getCoordFile() instanceof Visitable) {
            ((Visitable) aBean.getCoordFile()).accept(aVisitor);
        }
        if (aBean.getOrbit() instanceof Visitable) {
            ((Visitable) aBean.getOrbit()).accept(aVisitor);
        }
        for (JAXBElement<? extends CoordinateType> obj: aBean.getGenCoordinates()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseAstroSTCDescriptionTypeImpl(AstroSTCDescriptionTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (AstroCoordSystemType bean: aBean.getAstroCoordSystems()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (AstroCoordsType bean: aBean.getAstroCoords()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (AstroCoordAreaType bean: aBean.getAstroCoordAreas()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseAstronTimeTypeImpl(AstronTimeTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getTimeOffset() instanceof Visitable) {
            ((Visitable) aBean.getTimeOffset()).accept(aVisitor);
        }
        if ((aBean.getAbsoluteTime()!= null)&&(aBean.getAbsoluteTime().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getAbsoluteTime().getValue()).accept(aVisitor);
        }
    }

    @Override
    public void traverseBasicCoordinateTypeImpl(BasicCoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getValue() instanceof Visitable) {
            ((Visitable) aBean.getValue()).accept(aVisitor);
        }
        for (Double1Type bean: aBean.getErrors()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getResolutions()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getSizes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getPixSizes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseBoxTypeImpl(BoxTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getCenter() instanceof Visitable) {
            ((Visitable) aBean.getCenter()).accept(aVisitor);
        }
        if (aBean.getSize() instanceof Visitable) {
            ((Visitable) aBean.getSize()).accept(aVisitor);
        }
        if (aBean.getArea() instanceof Visitable) {
            ((Visitable) aBean.getArea()).accept(aVisitor);
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCart1DRefFrameTypeImpl(Cart1DRefFrameTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getScale() instanceof Visitable) {
            ((Visitable) aBean.getScale()).accept(aVisitor);
        }
        if (aBean.getRefFrameId() instanceof Visitable) {
            ((Visitable) aBean.getRefFrameId()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCart2DRefFrameTypeImpl(Cart2DRefFrameTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if ((aBean.getCTransform2()!= null)&&(aBean.getCTransform2().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getCTransform2().getValue()).accept(aVisitor);
        }
        if (aBean.getRefFrameId() instanceof Visitable) {
            ((Visitable) aBean.getRefFrameId()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCart3DRefFrameTypeImpl(Cart3DRefFrameTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if ((aBean.getCTransform3()!= null)&&(aBean.getCTransform3().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getCTransform3().getValue()).accept(aVisitor);
        }
        if (aBean.getRefFrameId() instanceof Visitable) {
            ((Visitable) aBean.getRefFrameId()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCircleTypeImpl(CircleTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getCenter() instanceof Visitable) {
            ((Visitable) aBean.getCenter()).accept(aVisitor);
        }
        if (aBean.getRadius() instanceof Visitable) {
            ((Visitable) aBean.getRadius()).accept(aVisitor);
        }
        if (aBean.getArea() instanceof Visitable) {
            ((Visitable) aBean.getArea()).accept(aVisitor);
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseConvexHullTypeImpl(ConvexHullTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (Double3Type bean: aBean.getPoints()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getArea() instanceof Visitable) {
            ((Visitable) aBean.getArea()).accept(aVisitor);
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseConvexTypeImpl(ConvexTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (HalfspaceType bean: aBean.getHalfspaces()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getArea() instanceof Visitable) {
            ((Visitable) aBean.getArea()).accept(aVisitor);
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCoord2VecIntervalTypeImpl(Coord2VecIntervalTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getLoLimit2Vec() instanceof Visitable) {
            ((Visitable) aBean.getLoLimit2Vec()).accept(aVisitor);
        }
        if (aBean.getHiLimit2Vec() instanceof Visitable) {
            ((Visitable) aBean.getHiLimit2Vec()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCoord3VecIntervalTypeImpl(Coord3VecIntervalTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getLoLimit3Vec() instanceof Visitable) {
            ((Visitable) aBean.getLoLimit3Vec()).accept(aVisitor);
        }
        if (aBean.getHiLimit3Vec() instanceof Visitable) {
            ((Visitable) aBean.getHiLimit3Vec()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCoordAreaTypeImpl(CoordAreaTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (JAXBElement<? extends CoordIntervalType> obj: aBean.getCoordIntervals()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCoordFITSColumnsTypeImpl(CoordFITSColumnsTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseCoordFlavorTypeImpl(CoordFlavorTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseCoordFrameTypeImpl(CoordFrameTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCoordIntervalTypeImpl(CoordIntervalTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCoordRefFrameTypeImpl(CoordRefFrameTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getRefFrameId() instanceof Visitable) {
            ((Visitable) aBean.getRefFrameId()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCoordScalarIntervalTypeImpl(CoordScalarIntervalTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getLoLimit() instanceof Visitable) {
            ((Visitable) aBean.getLoLimit()).accept(aVisitor);
        }
        if (aBean.getHiLimit() instanceof Visitable) {
            ((Visitable) aBean.getHiLimit()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCoordSysTypeImpl(CoordSysTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (GenericCoordFrameType bean: aBean.getCoordFrames()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCoordValueTypeImpl(CoordValueTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if ((aBean.getCoordValue()!= null)&&(aBean.getCoordValue().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getCoordValue().getValue()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCoordinateTypeImpl(CoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCoordsTypeImpl(CoordsTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (JAXBElement<? extends CoordinateType> obj: aBean.getGenCoordinates()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCurve2TypeImpl(Curve2TypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getP1() instanceof Visitable) {
            ((Visitable) aBean.getP1()).accept(aVisitor);
        }
        if (aBean.getP2() instanceof Visitable) {
            ((Visitable) aBean.getP2()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCurve3TypeImpl(Curve3TypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getP1() instanceof Visitable) {
            ((Visitable) aBean.getP1()).accept(aVisitor);
        }
        if (aBean.getP2() instanceof Visitable) {
            ((Visitable) aBean.getP2()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCustomRefPosTypeImpl(CustomRefPosTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if ((aBean.getCoordinate()!= null)&&(aBean.getCoordinate().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getCoordinate().getValue()).accept(aVisitor);
        }
    }

    @Override
    public void traverseDiffTypeImpl(DiffTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if ((aBean.getRegion()!= null)&&(aBean.getRegion().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getRegion().getValue()).accept(aVisitor);
        }
        if ((aBean.getRegion2()!= null)&&(aBean.getRegion2().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getRegion2().getValue()).accept(aVisitor);
        }
        if (aBean.getArea() instanceof Visitable) {
            ((Visitable) aBean.getArea()).accept(aVisitor);
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseDouble1TypeImpl(Double1TypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseDouble2TypeImpl(Double2TypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getC1() instanceof Visitable) {
            ((Visitable) aBean.getC1()).accept(aVisitor);
        }
        if (aBean.getC2() instanceof Visitable) {
            ((Visitable) aBean.getC2()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseDouble3TypeImpl(Double3TypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getC1() instanceof Visitable) {
            ((Visitable) aBean.getC1()).accept(aVisitor);
        }
        if (aBean.getC2() instanceof Visitable) {
            ((Visitable) aBean.getC2()).accept(aVisitor);
        }
        if (aBean.getC3() instanceof Visitable) {
            ((Visitable) aBean.getC3()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseDouble4TypeImpl(Double4TypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseDouble9TypeImpl(Double9TypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseEllipseTypeImpl(EllipseTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getCenter() instanceof Visitable) {
            ((Visitable) aBean.getCenter()).accept(aVisitor);
        }
        if (aBean.getSemiMajorAxis() instanceof Visitable) {
            ((Visitable) aBean.getSemiMajorAxis()).accept(aVisitor);
        }
        if (aBean.getSemiMinorAxis() instanceof Visitable) {
            ((Visitable) aBean.getSemiMinorAxis()).accept(aVisitor);
        }
        if (aBean.getPosAngle() instanceof Visitable) {
            ((Visitable) aBean.getPosAngle()).accept(aVisitor);
        }
        if (aBean.getArea() instanceof Visitable) {
            ((Visitable) aBean.getArea()).accept(aVisitor);
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseFitsTypeImpl(FitsTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseFkTypeImpl(FkTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getRefFrameId() instanceof Visitable) {
            ((Visitable) aBean.getRefFrameId()).accept(aVisitor);
        }
    }

    @Override
    public void traverseGenVector2CoordinateTypeImpl(GenVector2CoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if ((aBean.getCValue2()!= null)&&(aBean.getCValue2().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getCValue2().getValue()).accept(aVisitor);
        }
        for (JAXBElement<?> obj: aBean.getCError2s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCResolution2s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCSize2s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCPixSize2s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseGenVector3CoordinateTypeImpl(GenVector3CoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if ((aBean.getCValue3()!= null)&&(aBean.getCValue3().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getCValue3().getValue()).accept(aVisitor);
        }
        for (JAXBElement<?> obj: aBean.getCError3s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCResolution3s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCSize3s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCPixSize3s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseGenericCoordFrameTypeImpl(GenericCoordFrameTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if ((aBean.getCoordRefFrame()!= null)&&(aBean.getCoordRefFrame().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getCoordRefFrame().getValue()).accept(aVisitor);
        }
        if (aBean.getCoordRefPos() instanceof Visitable) {
            ((Visitable) aBean.getCoordRefPos()).accept(aVisitor);
        }
        if ((aBean.getCoordFlavor()!= null)&&(aBean.getCoordFlavor().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getCoordFlavor().getValue()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseGenericRefPosTypeImpl(GenericRefPosTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if ((aBean.getGenCoordinate()!= null)&&(aBean.getGenCoordinate().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getGenCoordinate().getValue()).accept(aVisitor);
        }
    }

    @Override
    public void traverseGeodTypeImpl(GeodTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getRefFrameId() instanceof Visitable) {
            ((Visitable) aBean.getRefFrameId()).accept(aVisitor);
        }
    }

    @Override
    public void traverseHalfspaceTypeImpl(HalfspaceTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getVector() instanceof Visitable) {
            ((Visitable) aBean.getVector()).accept(aVisitor);
        }
    }

    @Override
    public void traverseHealpixTypeImpl(HealpixTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseIcrsTypeImpl(IcrsTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getRefFrameId() instanceof Visitable) {
            ((Visitable) aBean.getRefFrameId()).accept(aVisitor);
        }
    }

    @Override
    public void traverseIntersectionTypeImpl(IntersectionTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (JAXBElement<? extends RegionType> obj: aBean.getRegions()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        if (aBean.getArea() instanceof Visitable) {
            ((Visitable) aBean.getArea()).accept(aVisitor);
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseIsoTimeTypeImpl(IsoTimeTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseJdTimeTypeImpl(JdTimeTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseNegationTypeImpl(NegationTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if ((aBean.getRegion()!= null)&&(aBean.getRegion().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getRegion().getValue()).accept(aVisitor);
        }
        if (aBean.getArea() instanceof Visitable) {
            ((Visitable) aBean.getArea()).accept(aVisitor);
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseObsDataLocationTypeImpl(ObsDataLocationTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getObservatoryLocation() instanceof Visitable) {
            ((Visitable) aBean.getObservatoryLocation()).accept(aVisitor);
        }
        if (aBean.getObservationLocation() instanceof Visitable) {
            ((Visitable) aBean.getObservationLocation()).accept(aVisitor);
        }
        if (aBean.getPixelSpace() instanceof Visitable) {
            ((Visitable) aBean.getPixelSpace()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseObservatoryLocationTypeImpl(ObservatoryLocationTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (AstroCoordSystemType bean: aBean.getAstroCoordSystems()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (AstroCoordsType bean: aBean.getAstroCoords()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseOrbitTypeImpl(OrbitTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getQ() instanceof Visitable) {
            ((Visitable) aBean.getQ()).accept(aVisitor);
        }
        if (aBean.getA() instanceof Visitable) {
            ((Visitable) aBean.getA()).accept(aVisitor);
        }
        if (aBean.getE() instanceof Visitable) {
            ((Visitable) aBean.getE()).accept(aVisitor);
        }
        if (aBean.getI() instanceof Visitable) {
            ((Visitable) aBean.getI()).accept(aVisitor);
        }
        if (aBean.getNode() instanceof Visitable) {
            ((Visitable) aBean.getNode()).accept(aVisitor);
        }
        if (aBean.getAop() instanceof Visitable) {
            ((Visitable) aBean.getAop()).accept(aVisitor);
        }
        if (aBean.getM() instanceof Visitable) {
            ((Visitable) aBean.getM()).accept(aVisitor);
        }
        if (aBean.getP() instanceof Visitable) {
            ((Visitable) aBean.getP()).accept(aVisitor);
        }
        if (aBean.getT() instanceof Visitable) {
            ((Visitable) aBean.getT()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseAImpl(OrbitTypeImpl.AImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseAopImpl(OrbitTypeImpl.AopImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseIImpl(OrbitTypeImpl.IImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseMImpl(OrbitTypeImpl.MImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseNodeImpl(OrbitTypeImpl.NodeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traversePImpl(OrbitTypeImpl.PImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseQImpl(OrbitTypeImpl.QImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traversePixelCoordAreaTypeImpl(PixelCoordAreaTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (JAXBElement<? extends CoordIntervalType> obj: aBean.getPixelCoordIntervals()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<? extends CoordIntervalType> obj: aBean.getCoordIntervals()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traversePixelCoordSystemTypeImpl(PixelCoordSystemTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (PixelFrameType bean: aBean.getPixelCoordFrames()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (GenericCoordFrameType bean: aBean.getCoordFrames()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traversePixelCoordsTypeImpl(PixelCoordsTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (JAXBElement<? extends CoordinateType> obj: aBean.getPixels()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<? extends CoordinateType> obj: aBean.getGenCoordinates()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traversePixelFrameTypeImpl(PixelFrameTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getReferencePixel() instanceof Visitable) {
            ((Visitable) aBean.getReferencePixel()).accept(aVisitor);
        }
        if (aBean.getRefFrameId() instanceof Visitable) {
            ((Visitable) aBean.getRefFrameId()).accept(aVisitor);
        }
        if ((aBean.getCoordRefFrame()!= null)&&(aBean.getCoordRefFrame().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getCoordRefFrame().getValue()).accept(aVisitor);
        }
        if (aBean.getCoordRefPos() instanceof Visitable) {
            ((Visitable) aBean.getCoordRefPos()).accept(aVisitor);
        }
        if ((aBean.getCoordFlavor()!= null)&&(aBean.getCoordFlavor().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getCoordFlavor().getValue()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traversePixelSpaceTypeImpl(PixelSpaceTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getPixelCoordSystem() instanceof Visitable) {
            ((Visitable) aBean.getPixelCoordSystem()).accept(aVisitor);
        }
        for (PixelCoordsType bean: aBean.getPixelCoords()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getPixelCoordArea() instanceof Visitable) {
            ((Visitable) aBean.getPixelCoordArea()).accept(aVisitor);
        }
    }

    @Override
    public void traversePixelTypeImpl(PixelTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if ((aBean.getPixel()!= null)&&(aBean.getPixel().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getPixel().getValue()).accept(aVisitor);
        }
    }

    @Override
    public void traversePixelVector1CoordinateTypeImpl(PixelVector1CoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getValue() instanceof Visitable) {
            ((Visitable) aBean.getValue()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traversePixelVector2CoordinateTypeImpl(PixelVector2CoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getValue2() instanceof Visitable) {
            ((Visitable) aBean.getValue2()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traversePixelVector3CoordinateTypeImpl(PixelVector3CoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getValue3() instanceof Visitable) {
            ((Visitable) aBean.getValue3()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traversePolygonTypeImpl(PolygonTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (VertexType bean: aBean.getVertices()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getArea() instanceof Visitable) {
            ((Visitable) aBean.getArea()).accept(aVisitor);
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traversePos2VecIntervalTypeImpl(Pos2VecIntervalTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getLoLimit2Vec() instanceof Visitable) {
            ((Visitable) aBean.getLoLimit2Vec()).accept(aVisitor);
        }
        if (aBean.getHiLimit2Vec() instanceof Visitable) {
            ((Visitable) aBean.getHiLimit2Vec()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traversePos3VecIntervalTypeImpl(Pos3VecIntervalTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getLoLimit3Vec() instanceof Visitable) {
            ((Visitable) aBean.getLoLimit3Vec()).accept(aVisitor);
        }
        if (aBean.getHiLimit3Vec() instanceof Visitable) {
            ((Visitable) aBean.getHiLimit3Vec()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traversePosAngleTypeImpl(PosAngleTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traversePosScalarIntervalTypeImpl(PosScalarIntervalTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getLoLimit() instanceof Visitable) {
            ((Visitable) aBean.getLoLimit()).accept(aVisitor);
        }
        if (aBean.getHiLimit() instanceof Visitable) {
            ((Visitable) aBean.getHiLimit()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traversePosVector1CoordinateTypeImpl(PosVector1CoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getValue() instanceof Visitable) {
            ((Visitable) aBean.getValue()).accept(aVisitor);
        }
        for (Double1Type bean: aBean.getErrors()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getResolutions()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getSizes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getPixSizes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traversePosVector2CoordinateTypeImpl(PosVector2CoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if ((aBean.getCValue2()!= null)&&(aBean.getCValue2().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getCValue2().getValue()).accept(aVisitor);
        }
        for (JAXBElement<?> obj: aBean.getCError2s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCResolution2s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCSize2s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCPixSize2s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traversePosVector3CoordinateTypeImpl(PosVector3CoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if ((aBean.getCValue3()!= null)&&(aBean.getCValue3().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getCValue3().getValue()).accept(aVisitor);
        }
        for (JAXBElement<?> obj: aBean.getCError3s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCResolution3s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCSize3s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCPixSize3s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseRedshiftCoordinateTypeImpl(RedshiftCoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getValue() instanceof Visitable) {
            ((Visitable) aBean.getValue()).accept(aVisitor);
        }
        for (Double1Type bean: aBean.getErrors()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getResolutions()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getSizes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getPixSizes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseRedshiftFrameTypeImpl(RedshiftFrameTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if ((aBean.getReferencePosition()!= null)&&(aBean.getReferencePosition().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getReferencePosition().getValue()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseRedshiftIntervalTypeImpl(RedshiftIntervalTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getLoLimit() instanceof Visitable) {
            ((Visitable) aBean.getLoLimit()).accept(aVisitor);
        }
        if (aBean.getHiLimit() instanceof Visitable) {
            ((Visitable) aBean.getHiLimit()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseRegionAreaTypeImpl(RegionAreaTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseRegionFileTypeImpl(RegionFileTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseRegionTypeImpl(RegionTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getArea() instanceof Visitable) {
            ((Visitable) aBean.getArea()).accept(aVisitor);
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseSTCCoordinateImpl(STCCoordinateImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getAstroCoordSystem() instanceof Visitable) {
            ((Visitable) aBean.getAstroCoordSystem()).accept(aVisitor);
        }
        if (aBean.getAstroCoords() instanceof Visitable) {
            ((Visitable) aBean.getAstroCoords()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseSTCCoordinateListImpl(STCCoordinateListImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getAstroCoordSystem() instanceof Visitable) {
            ((Visitable) aBean.getAstroCoordSystem()).accept(aVisitor);
        }
        for (AstroCoordsType bean: aBean.getAstroCoords()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseSTCRegionImpl(STCRegionImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getAstroCoordSystem() instanceof Visitable) {
            ((Visitable) aBean.getAstroCoordSystem()).accept(aVisitor);
        }
        if ((aBean.getRegion()!= null)&&(aBean.getRegion().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getRegion().getValue()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseSTCRegionListImpl(STCRegionListImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getAstroCoordSystem() instanceof Visitable) {
            ((Visitable) aBean.getAstroCoordSystem()).accept(aVisitor);
        }
        for (JAXBElement<? extends RegionType> obj: aBean.getRegions()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseScalarCoordinateTypeImpl(ScalarCoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getValue() instanceof Visitable) {
            ((Visitable) aBean.getValue()).accept(aVisitor);
        }
        for (Double1Type bean: aBean.getErrors()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getResolutions()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getSizes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getPixSizes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseSectorTypeImpl(SectorTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getPosition() instanceof Visitable) {
            ((Visitable) aBean.getPosition()).accept(aVisitor);
        }
        if (aBean.getPosAngle1() instanceof Visitable) {
            ((Visitable) aBean.getPosAngle1()).accept(aVisitor);
        }
        if (aBean.getPosAngle2() instanceof Visitable) {
            ((Visitable) aBean.getPosAngle2()).accept(aVisitor);
        }
        if (aBean.getArea() instanceof Visitable) {
            ((Visitable) aBean.getArea()).accept(aVisitor);
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseShapeTypeImpl(ShapeTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getArea() instanceof Visitable) {
            ((Visitable) aBean.getArea()).accept(aVisitor);
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseSize2TypeImpl(Size2TypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getPosAngle() instanceof Visitable) {
            ((Visitable) aBean.getPosAngle()).accept(aVisitor);
        }
        if (aBean.getC1() instanceof Visitable) {
            ((Visitable) aBean.getC1()).accept(aVisitor);
        }
        if (aBean.getC2() instanceof Visitable) {
            ((Visitable) aBean.getC2()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseSize3TypeImpl(Size3TypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getPosAngle1() instanceof Visitable) {
            ((Visitable) aBean.getPosAngle1()).accept(aVisitor);
        }
        if (aBean.getPosAngle2() instanceof Visitable) {
            ((Visitable) aBean.getPosAngle2()).accept(aVisitor);
        }
        if (aBean.getC1() instanceof Visitable) {
            ((Visitable) aBean.getC1()).accept(aVisitor);
        }
        if (aBean.getC2() instanceof Visitable) {
            ((Visitable) aBean.getC2()).accept(aVisitor);
        }
        if (aBean.getC3() instanceof Visitable) {
            ((Visitable) aBean.getC3()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseSmallCircleTypeImpl(SmallCircleTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getPole() instanceof Visitable) {
            ((Visitable) aBean.getPole()).accept(aVisitor);
        }
    }

    @Override
    public void traverseSpaceFrameTypeImpl(SpaceFrameTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if ((aBean.getSpaceRefFrame()!= null)&&(aBean.getSpaceRefFrame().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getSpaceRefFrame().getValue()).accept(aVisitor);
        }
        if ((aBean.getReferencePosition()!= null)&&(aBean.getReferencePosition().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getReferencePosition().getValue()).accept(aVisitor);
        }
        if (aBean.getOffsetCenter() instanceof Visitable) {
            ((Visitable) aBean.getOffsetCenter()).accept(aVisitor);
        }
        if ((aBean.getCoordFlavor()!= null)&&(aBean.getCoordFlavor().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getCoordFlavor().getValue()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseSpectralCoordinateTypeImpl(SpectralCoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getValue() instanceof Visitable) {
            ((Visitable) aBean.getValue()).accept(aVisitor);
        }
        for (Double1Type bean: aBean.getErrors()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getResolutions()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getSizes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getPixSizes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseSpectralFrameTypeImpl(SpectralFrameTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if ((aBean.getReferencePosition()!= null)&&(aBean.getReferencePosition().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getReferencePosition().getValue()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseSpectralIntervalTypeImpl(SpectralIntervalTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getLoLimit() instanceof Visitable) {
            ((Visitable) aBean.getLoLimit()).accept(aVisitor);
        }
        if (aBean.getHiLimit() instanceof Visitable) {
            ((Visitable) aBean.getHiLimit()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseSphereTypeImpl(SphereTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getRadius() instanceof Visitable) {
            ((Visitable) aBean.getRadius()).accept(aVisitor);
        }
        if (aBean.getCenter() instanceof Visitable) {
            ((Visitable) aBean.getCenter()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseSphericalRefFrameTypeImpl(SphericalRefFrameTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getPoleZaxis() instanceof Visitable) {
            ((Visitable) aBean.getPoleZaxis()).accept(aVisitor);
        }
        if (aBean.getXaxis() instanceof Visitable) {
            ((Visitable) aBean.getXaxis()).accept(aVisitor);
        }
        if (aBean.getRefFrameId() instanceof Visitable) {
            ((Visitable) aBean.getRefFrameId()).accept(aVisitor);
        }
    }

    @Override
    public void traverseStcDescriptionTypeImpl(StcDescriptionTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (JAXBElement<? extends CoordSysType> obj: aBean.getCoordSys()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<? extends CoordsType> obj: aBean.getCoords()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<? extends CoordAreaType> obj: aBean.getCoordAreas()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseStcMetadataTypeImpl(StcMetadataTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseStdRefPosTypeImpl(StdRefPosTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseStringCoordinateTypeImpl(StringCoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseTimeCoordinateTypeImpl(TimeCoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getTimeInstant() instanceof Visitable) {
            ((Visitable) aBean.getTimeInstant()).accept(aVisitor);
        }
        for (Double1Type bean: aBean.getErrors()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getResolutions()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getSizes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getPixSizes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseTimeFrameTypeImpl(TimeFrameTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if ((aBean.getReferencePosition()!= null)&&(aBean.getReferencePosition().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getReferencePosition().getValue()).accept(aVisitor);
        }
        if (aBean.getTimeRefDirection() instanceof Visitable) {
            ((Visitable) aBean.getTimeRefDirection()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseTimeIntervalTypeImpl(TimeIntervalTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getStartTime() instanceof Visitable) {
            ((Visitable) aBean.getStartTime()).accept(aVisitor);
        }
        if (aBean.getStopTime() instanceof Visitable) {
            ((Visitable) aBean.getStopTime()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseTimeOffsetTypeImpl(TimeOffsetTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseUCoord2VecIntervalTypeImpl(UCoord2VecIntervalTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getLoLimit2Vec() instanceof Visitable) {
            ((Visitable) aBean.getLoLimit2Vec()).accept(aVisitor);
        }
        if (aBean.getHiLimit2Vec() instanceof Visitable) {
            ((Visitable) aBean.getHiLimit2Vec()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseUCoord3VecIntervalTypeImpl(UCoord3VecIntervalTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getLoLimit3Vec() instanceof Visitable) {
            ((Visitable) aBean.getLoLimit3Vec()).accept(aVisitor);
        }
        if (aBean.getHiLimit3Vec() instanceof Visitable) {
            ((Visitable) aBean.getHiLimit3Vec()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseUCoordScalarIntervalTypeImpl(UCoordScalarIntervalTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getLoLimit() instanceof Visitable) {
            ((Visitable) aBean.getLoLimit()).accept(aVisitor);
        }
        if (aBean.getHiLimit() instanceof Visitable) {
            ((Visitable) aBean.getHiLimit()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseUnionTypeImpl(UnionTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (JAXBElement<? extends RegionType> obj: aBean.getRegions()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        if (aBean.getArea() instanceof Visitable) {
            ((Visitable) aBean.getArea()).accept(aVisitor);
        }
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseVector2CoordinateTypeImpl(Vector2CoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if ((aBean.getCValue2()!= null)&&(aBean.getCValue2().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getCValue2().getValue()).accept(aVisitor);
        }
        for (JAXBElement<?> obj: aBean.getCError2s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCResolution2s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCSize2s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCPixSize2s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseVector3CoordinateTypeImpl(Vector3CoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if ((aBean.getCValue3()!= null)&&(aBean.getCValue3().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getCValue3().getValue()).accept(aVisitor);
        }
        for (JAXBElement<?> obj: aBean.getCError3s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCResolution3s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCSize3s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCPixSize3s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseVel2VecIntervalTypeImpl(Vel2VecIntervalTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getLoLimit2Vec() instanceof Visitable) {
            ((Visitable) aBean.getLoLimit2Vec()).accept(aVisitor);
        }
        if (aBean.getHiLimit2Vec() instanceof Visitable) {
            ((Visitable) aBean.getHiLimit2Vec()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseVel3VecIntervalTypeImpl(Vel3VecIntervalTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getLoLimit3Vec() instanceof Visitable) {
            ((Visitable) aBean.getLoLimit3Vec()).accept(aVisitor);
        }
        if (aBean.getHiLimit3Vec() instanceof Visitable) {
            ((Visitable) aBean.getHiLimit3Vec()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseVelScalarIntervalTypeImpl(VelScalarIntervalTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getLoLimit() instanceof Visitable) {
            ((Visitable) aBean.getLoLimit()).accept(aVisitor);
        }
        if (aBean.getHiLimit() instanceof Visitable) {
            ((Visitable) aBean.getHiLimit()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseVelVector1CoordinateTypeImpl(VelVector1CoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if (aBean.getValue() instanceof Visitable) {
            ((Visitable) aBean.getValue()).accept(aVisitor);
        }
        for (Double1Type bean: aBean.getErrors()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getResolutions()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getSizes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Double1Type bean: aBean.getPixSizes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseVelVector2CoordinateTypeImpl(VelVector2CoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if ((aBean.getCValue2()!= null)&&(aBean.getCValue2().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getCValue2().getValue()).accept(aVisitor);
        }
        for (JAXBElement<?> obj: aBean.getCError2s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCResolution2s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCSize2s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCPixSize2s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseVelVector3CoordinateTypeImpl(VelVector3CoordinateTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getCoordSystemId() instanceof Visitable) {
            ((Visitable) aBean.getCoordSystemId()).accept(aVisitor);
        }
        if ((aBean.getCValue3()!= null)&&(aBean.getCValue3().getValue() instanceof Visitable)) {
            ((Visitable) aBean.getCValue3().getValue()).accept(aVisitor);
        }
        for (JAXBElement<?> obj: aBean.getCError3s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCResolution3s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCSize3s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        for (JAXBElement<?> obj: aBean.getCPixSize3s()) {
            if (obj.getValue() instanceof Visitable) {
                ((Visitable) obj.getValue()).accept(aVisitor);
            }
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseVelocitySphereTypeImpl(VelocitySphereTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getRadius() instanceof Visitable) {
            ((Visitable) aBean.getRadius()).accept(aVisitor);
        }
        if (aBean.getCenter() instanceof Visitable) {
            ((Visitable) aBean.getCenter()).accept(aVisitor);
        }
        if (aBean.getFrameId() instanceof Visitable) {
            ((Visitable) aBean.getFrameId()).accept(aVisitor);
        }
        if (aBean.getIdref() instanceof Visitable) {
            ((Visitable) aBean.getIdref()).accept(aVisitor);
        }
    }

    @Override
    public void traverseVertexTypeImpl(VertexTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getPosition() instanceof Visitable) {
            ((Visitable) aBean.getPosition()).accept(aVisitor);
        }
        if (aBean.getSmallCircle() instanceof Visitable) {
            ((Visitable) aBean.getSmallCircle()).accept(aVisitor);
        }
    }

    @Override
    public void traverseErrorSummaryImpl(ErrorSummaryImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseJobImpl(JobImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (Parameter bean: aBean.getParameters()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (ResultReference bean: aBean.getResults()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getErrorSummary() instanceof Visitable) {
            ((Visitable) aBean.getErrorSummary()).accept(aVisitor);
        }
        if (aBean.getJobInfo() instanceof Visitable) {
            ((Visitable) aBean.getJobInfo()).accept(aVisitor);
        }
    }

    @Override
    public void traverseJobInfoImpl(JobImpl.JobInfoImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (Element bean: aBean.getAnies()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseJobsImpl(JobsImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (ShortJobDescription bean: aBean.getJobreves()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseParameterImpl(ParameterImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseResultReferenceImpl(ResultReferenceImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseShortJobDescriptionImpl(ShortJobDescriptionImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseAttributeImpl(AttributeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getSemanticconcept() instanceof Visitable) {
            ((Visitable) aBean.getSemanticconcept()).accept(aVisitor);
        }
        if (aBean.getDatatype() instanceof Visitable) {
            ((Visitable) aBean.getDatatype()).accept(aVisitor);
        }
        if (aBean.getMultiplicity() instanceof Visitable) {
            ((Visitable) aBean.getMultiplicity()).accept(aVisitor);
        }
    }

    @Override
    public void traverseCompositionImpl(CompositionImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getDatatype() instanceof Visitable) {
            ((Visitable) aBean.getDatatype()).accept(aVisitor);
        }
        if (aBean.getMultiplicity() instanceof Visitable) {
            ((Visitable) aBean.getMultiplicity()).accept(aVisitor);
        }
    }

    @Override
    public void traverseConstraintImpl(ConstraintImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseDataTypeImpl(org.javastro.ivoa.entities.vodml.impl.DataTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (Attribute bean: aBean.getAttributes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Reference bean: aBean.getReferences()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getExtends() instanceof Visitable) {
            ((Visitable) aBean.getExtends()).accept(aVisitor);
        }
        for (Constraint bean: aBean.getConstraints()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseElementRefImpl(ElementRefImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseEnumLiteralImpl(EnumLiteralImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseEnumerationImpl(EnumerationImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (EnumLiteral bean: aBean.getLiterals()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getExtends() instanceof Visitable) {
            ((Visitable) aBean.getExtends()).accept(aVisitor);
        }
        for (Constraint bean: aBean.getConstraints()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseModelImpl(ModelImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (ModelImport bean: aBean.getImports()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (PrimitiveType bean: aBean.getPrimitiveTypes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Enumeration bean: aBean.getEnumerations()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (DataType bean: aBean.getDataTypes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (ObjectType bean: aBean.getObjectTypes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Package bean: aBean.getPackages()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseModelImportImpl(ModelImportImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseMultiplicityImpl(MultiplicityImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseObjectTypeImpl(ObjectTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (Attribute bean: aBean.getAttributes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Composition bean: aBean.getCompositions()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Reference bean: aBean.getReferences()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        if (aBean.getExtends() instanceof Visitable) {
            ((Visitable) aBean.getExtends()).accept(aVisitor);
        }
        for (Constraint bean: aBean.getConstraints()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traversePackageImpl(PackageImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        for (PrimitiveType bean: aBean.getPrimitiveTypes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Enumeration bean: aBean.getEnumerations()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (DataType bean: aBean.getDataTypes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (ObjectType bean: aBean.getObjectTypes()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
        for (Package bean: aBean.getPackages()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traversePrimitiveTypeImpl(PrimitiveTypeImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getExtends() instanceof Visitable) {
            ((Visitable) aBean.getExtends()).accept(aVisitor);
        }
        for (Constraint bean: aBean.getConstraints()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            } else {
                if (bean instanceof JAXBElement<?> ) {
                    if (((JAXBElement<?> ) bean).getValue() instanceof Visitable) {
                        ((Visitable)((JAXBElement<?> ) bean).getValue()).accept(aVisitor);
                    }
                }
            }
        }
    }

    @Override
    public void traverseReferenceImpl(ReferenceImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getDatatype() instanceof Visitable) {
            ((Visitable) aBean.getDatatype()).accept(aVisitor);
        }
        if (aBean.getMultiplicity() instanceof Visitable) {
            ((Visitable) aBean.getMultiplicity()).accept(aVisitor);
        }
    }

    @Override
    public void traverseSemanticConceptImpl(SemanticConceptImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

    @Override
    public void traverseSubsettedRoleImpl(SubsettedRoleImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
        if (aBean.getRole() instanceof Visitable) {
            ((Visitable) aBean.getRole()).accept(aVisitor);
        }
        if (aBean.getDatatype() instanceof Visitable) {
            ((Visitable) aBean.getDatatype()).accept(aVisitor);
        }
        if (aBean.getSemanticconcept() instanceof Visitable) {
            ((Visitable) aBean.getSemanticconcept()).accept(aVisitor);
        }
    }

    @Override
    public void traverseAvailabilityImpl(AvailabilityImpl aBean, Visitor<?, E> aVisitor)
        throws E
    {
    }

}
